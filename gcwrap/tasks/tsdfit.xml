<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd
file:///opt/casa/code/xmlcasa/xml/casa.xsd">


<!-- This is the param set for tsdfit -->

<task type="function" name="tsdfit" category="single dish" visibility="experimental">

  <shortdescription>Fit a spectral line</shortdescription>

  <description>
Task tsdfit is a basic line-fitter for single-dish spectra.
It assumes that the spectra have been calibrated in tsdcal
or sdreduce.
  </description>

  <input>

    <param type="string" name="infile"  mustexist="true">
        <description>name of input SD dataset</description>
        <value></value>
    </param>

    <param type="string" name="datacolumn" ignorecase="true">
        <description>name of data column to be used [\'data\', \'float_data\', or \'corrected_data\']</description>
        <value>data</value>
    </param>

    <param type="any" name="antenna">
        <description>select an antenna name or ID, e.g. \'PM03\'</description>
        <any type="variant" limittypes="string int"/>
        <value type="int">0</value>
    </param> 

    <param type="string" name="field">
        <description>select data by field IDs and names, e.g. \'3C2*\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="spw">
        <description>select data by IF IDs (spectral windows), e.g. \'3,5,7\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="timerange">
        <description>select data by time range, e.g. \'09:14:0~09:54:0\' (\'\'=all) (see examples in help)</description>
        <value></value>
    </param>

    <param type="string" name="scan">
        <description>select data by scan numbers, e.g. \'21~23\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="pol">
        <description>select data by polarization IDs, e.g. \'0,1\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="fitfunc">
<!--        <shortdescription>function for fitting [\'gaussian\', \'lorentzian\']</shortdescription> -->
        <shortdescription>function for fitting. only \'gaussian\' is available now.</shortdescription>
        <description>function for fitting</description>
        <value>gaussian</value>
        <allowed kind="enum">
            <value>gaussian</value>
<!--            <value>lorentzian</value> -->
        </allowed>
    </param>

    <param type="string" name="fitmode">
<!--        <shortdescription>mode for fitting [\'auto\', \'list\', or \'interact\']</shortdescription> -->
        <shortdescription>mode for fitting. only \'list\' is available now.</shortdescription>
        <description>mode for fitting</description>
        <value>list</value>
        <allowed kind="enum">
<!--            <value>auto</value> -->
            <value>list</value>
<!--            <value>interact</value> -->
        </allowed>
    </param>

    <param type="intArray" name="nfit">
<!--        <description>list of number of gaussian/lorentzian lines to fit in maskline region (ignored when fitmode="auto")</description> -->
        <description>list of number of lines to fit in maskline region.</description>
        <value type="vector"><value>0</value></value>
    </param>

    <param type="double" name="thresh" subparam="true">
        <description>S/N threshold for linefinder</description>
        <value>5.0</value>
    </param>

    <param type="int" name="min_nchan" subparam="true">
        <description>minimum number of consecutive channels for linefinder</description>
        <value>3</value>
    </param>

    <param type="int" name="avg_limit" subparam="true">
        <description>channel averaging for broad lines</description>
        <value>4</value>
    </param>

    <param type="double" name="box_size" subparam="true">
        <description>running mean box size</description>
        <value>0.2</value>
    </param>

    <param type="intArray" name="edge" subparam="true">
        <description>channels to drop at beginning and end of spectrum</description>
        <value type="vector"><value>0</value></value>
    </param>

    <param type="string" name="outfile">
        <description>name of output file</description>
        <value></value>
    </param>

    <param type="bool" name="overwrite">
        <shortdescription>overwrite the output file if already exists [True, False]</shortdescription>
        <description>overwrite the output file if already exists</description>
        <value>False</value>
    </param>

    <constraints>
            <when param="fitmode">
<!--
                <equals value="auto">
                        <default param="thresh"><value>5.0</value></default>
                        <default param="min_nchan"><value>3</value></default>
                        <default param="avg_limit"><value>4</value></default>
                        <default param="box_size"><value>0.2</value></default>
                        <default param="edge"><value type='vector'><value>0</value></value></default>
                </equals>
-->
                <equals value="list"/>
                <equals value="interact"/>
            </when>
    </constraints>
  </input>
  <output>
    <param type="any" name="xstat">
            <description>RETURN ONLY: a Python dictionary of line statistics</description>
            <any type='variant'/>
            <value>{}</value>
    </param>
  </output>

  <returns type="variant" limittype="void record"/>

  <example>
-----------------
Keyword arguments
-----------------
infile -- name of input SD dataset
datacolumn -- name of data column to be used
        options: 'data', 'float_data', or 'corrected_data'
        default: 'data'
antenna -- select an antenna name or ID
        default: 0
        example: 'PM03'
field -- select data by field IDs and names
        default: '' (use all fields)
        example: field='3C2*' (all names starting with 3C2)
                 field='0,4,5~7' (field IDs 0,4,5,6,7)
                 field='0,3C273' (field ID 0 or field named 3C273)
        this selection is in addition to the other selections to data
spw -- select data by IF IDs (spectral windows)/channels
        default: '' (use all IFs and channels)
        example: spw='3,5,7' (IF IDs 3,5,7; all channels)
                 spw='&lt;2' (IF IDs less than 2, i.e., 0,1; all channels)
                 spw='30~45GHz' (IF IDs with the center frequencies in range 30-45GHz; all channels)
                 spw='0:5~61' (IF ID 0; channels 5 to 61; all channels)
                 spw='3:10~20;50~60' (select multiple channel ranges within IF ID 3)
                 spw='3:10~20,4:0~30' (select different channel ranges for IF IDs 3 and 4)
                 spw='1~4;6:15~48' (for channels 15 through 48 for IF IDs 1,2,3,4 and 6)
        this selection is in addition to the other selections to data
timerange -- select data by time range
        default: '' (use all)
        example: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                 Note: YYYY/MM/DD can be dropped as needed:
                 timerange='09:14:00~09:54:00' # this time range
                 timerange='09:44:00' # data within one integration of time
                 timerange='&gt;10:24:00' # data after this time
                 timerange='09:44:00+00:13:00' #data 13 minutes after time
        this selection is in addition to the other selections to data
scan -- select data by scan numbers
        default: '' (use all scans)
        example: scan='21~23' (scan IDs 21,22,23)
        this selection is in addition to the other selections to data
pol -- select data by polarization IDs
        default: '' (use all polarizations)
        example: pol='0,1' (polarization IDs 0,1)
        this selection is in addition to the other selections to data
fitfunc -- function for fitting
        options: 'gaussian' ('lorentzian' will be available later)
        default: 'gaussian'
fitmode -- mode for fitting
        options: 'list' ('auto' and 'interact' will be available later)
        default: 'list'
        example: 'list' will use channel ranges specified in the parameter 
                        spw to fit for lines
                 'auto' will use the linefinder to fit for lines
                        using the following parameters
                 'interact' allows adding and deleting mask 
                        regions by drawing rectangles on the plot 
                        with mouse. Draw a rectangle with LEFT-mouse 
                        to ADD the region to the mask and with RIGHT-mouse 
                        to DELETE the region. 
    &gt;&gt;&gt; fitmode expandable parameters     
        thresh -- S/N threshold for linefinder. a single channel S/N ratio
                  above which the channel is considered to be a detection.
                default: 5
        min_nchan -- minimum number of consecutive channels required to
                     pass threshold
                       default: 3
        avg_limit -- channel averaging for broad lines. a number of
                     consecutive channels not greater than this parameter
                     can be averaged to search for broad lines.
                default: 4
        box_size -- running mean box size specified as a fraction
                    of the total spectrum length
                default: 0.2
        edge -- channels to drop at beginning and end of spectrum
                default: 0
                example: edge=[1000] drops 1000 channels at beginning AND end.
                         edge=[1000,500] drops 1000 from beginning and 500
                         from end

        Note: For bad baselines threshold should be increased,
        and avg_limit decreased (or even switched off completely by
        setting this parameter to 1) to avoid detecting baseline
        undulations instead of real lines.
nfit -- list of number of lines to fit in each region specified by the 
        parameter spw <!--(ignored when fitmode='auto')-->
        default: [0] (no fitting)
        example: nfit=[1] for single line in single region,
                 nfit=[2] for two lines in single region,
                 nfit=[1,1] for single lines in each of two regions, etc.
outfile -- name of output file
        default: no output fit file
        example: 'mysd.fit'
overwrite -- overwrite the output file if already exists
        options: (bool) True, False
        default: False

-------
Returns
-------
a Python dictionary of line statistics
    keys: 'peak', 'cent', 'fwhm', 'nfit'
    example: each value except for 'nfit' is a list of lists with 
             a list of 2 entries [fitvalue,error] per component.
             e.g. xstat['peak']=[[234.9, 4.8],[234.2, 5.3]]
             for 2 components.

-----------
DESCRIPTION
-----------
Task tsdfit is a basic line-fitter for single-dish spectra.
It assumes that the spectra have been calibrated in tsdcal
or sdreduce.

Note that multiple scans, IFs, and polarizations can in principle 
be handled, but we recommend that you use scan, field, spw, and pol
to give a single selection for each fit.

Currently, you can choose only Gaussian profile as fitting model. 

-------
FITMODE
-------
As described in the parameter description section, tsdfit implements 
a fitting mode 'list' so far. The 'list' mode allows users to set 
initial guess manually. Only controllable parameter for the guess is 
range of the line region and number of lines per region.
In 'list' mode, users must give line region via spw parameter by 
using ms selection syntax while number of lines per region can be 
specified via nfit parameter. For example,
 
    spw = '17:1500~2500'
    nfit = [1]

will set line region between channels 1500 and 2500 for spw 17, and
indicate that there is only one line in this region. Specifying single
region with multiple line is also possible but is not recommended.

  </example>

</task>

</casaxml>
