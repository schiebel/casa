<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">


<!-- This is the param set for tsdbaseline -->

<task type="function" name="tsdbaseline" category="single dish" visibility="experimental">

  <shortdescription>Fit/subtract a spectral baseline </shortdescription>

  <description>
Task tsdbaseline fits and/or subtracts baseline from single-dish spectra.
Given baseline parameters (baseline type, order, etc.), tsdbaseline 
computes the best-fit baseline for each spectrum by least-square fitting 
method and, if you want, subtracts it. The best-fit baseline parameters 
(including baseline type, coefficients of basis functions, etc.) and 
other values such as residual rms can be saved in various formats 
including ascii text (in human-readable format or CSV format) or baseline 
table (a CASA table).
Tsdbaseline has another mode to 'apply' a baseline table to a MS data; 
for each spectrum in MS, the best-fit baseline is reproduced from the 
baseline parameters stored in the given baseline table and subtracted. 
Putting 'fit' and 'subtract' into separate processes can be useful for 
pipeline processing for huge dataset.
  </description>

  <input>

    <param type="string" name="infile"  mustexist="true">
        <description>name of input SD dataset</description>
        <value></value>
    </param>

    <param type="string" name="datacolumn" ignorecase="true">
        <description>name of data column to be used [\'data\', \'float_data\', or \'corrected\']</description>
        <value>data</value>
        <allowed kind="enum">
            <value>data</value>
            <value>float_data</value>
            <value>corrected</value>
        </allowed>
    </param>

    <param type="any" name="antenna">
        <description>select an antenna name or ID, e.g. \'PM03\'</description>
        <any type="variant" limittypes="string int"/>
        <value type="int">0</value>
    </param> 

    <param type="string" name="field">
        <description>select data by field IDs and names, e.g. \'3C2*\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="spw">
        <description>select data by IF IDs (spectral windows), e.g. \'3,5,7\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="timerange">
        <description>select data by time range, e.g. \'09:14:0~09:54:0\' (\'\'=all) (see examples in help)</description>
        <value></value>
    </param>

    <param type="string" name="scan">
        <description>select data by scan numbers, e.g. \'21~23\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="pol">
        <description>select data by polarization IDs, e.g. \'0,1\' (\'\'=all)</description>
        <value></value>
    </param>

    <param type="string" name="maskmode" ignorecase="true">
<!--        <shortdescription>mode of setting additional channel masks [\'auto\', \'list\', or \'interact\']</shortdescription> -->
        <shortdescription>mode of setting additional channel masks. \'list\' and \'auto\' are available now.</shortdescription>
        <description>mode of setting additional channel masks</description>
        <value>list</value>
        <allowed kind="enum">
            <value>auto</value>
            <value>list</value>
<!--            <value>interact</value> -->
        </allowed>
    </param>

    <param type="double" name="thresh" subparam="true">
        <description>S/N threshold for linefinder</description>
        <value>5.0</value>
    </param>

    <param type="int" name="avg_limit" subparam="true">
        <description>channel averaging for broad lines</description>
        <value>4</value>
    </param>

    <param type="int" name="minwidth" subparam="true">
        <description>the minimum channel width to detect as a line</description>
        <value>4</value>
    </param>

    <param type="intArray" name="edge" subparam="true">
        <description>channels to drop at beginning and end of spectrum</description>
        <value type="vector"><value>0</value><value>0</value></value>
    </param>

    <param type="string" name="blmode" ignorecase="true">
        <description>baselining mode [\'fit\' or \'apply\']</description>
        <value>fit</value>
    </param>

    <param type="bool" name="dosubtract" subparam="true">
        <description>subtract baseline from input data [True, False] </description>
        <value>True</value>
    </param>

    <param type="any" name="blformat" ignorecase="true" subparam="true">
        <shortdescription>format(s) of file(s) in which best-fit parameters are written [\'text\', \'csv\', \'table\' or \'\']</shortdescription>
        <description>format(s) of file(s) in which best-fit parameters are written</description>
        <any type="variant" limittypes="string stringArray"/>
        <value type="string">text</value>
        <allowed kind="enum">
            <value>table</value>
            <value>text</value>
            <value>csv</value>
            <value></value>
        </allowed>
    </param>

    <param type="any" name="bloutput" subparam="true">
        <description>name(s) of file(s) in which best-fit parameters are written</description>
        <any type="variant" limittypes="string stringArray"/>
        <value type="string"></value>
    </param>

    <param type="string" name="bltable" subparam="true">
        <description>name of baseline table to apply</description>
        <value></value>
    </param>

    <param type="string" name="blfunc" ignorecase="true">
        <!-- shortdescription>baseline model function [\'poly\', \'chebyshev\', \'cspline\', \'sinusoid\', or \'variable\'(expert mode)]</shortdescription -->
        <shortdescription>baseline model function [\'poly\', \'chebyshev\', \'cspline\', or \'variable\'(expert mode)]</shortdescription>
        <description>baseline model function</description>
        <value>poly</value>
        <allowed kind="enum">
            <value>poly</value>
            <value>chebyshev</value>
            <value>cspline</value>
          <!--  <value>sinusoid</value> -->
            <value>variable</value>
        </allowed>
    </param>

    <param type="int" name="order" subparam="true">
        <description>order of baseline model function</description>
        <value>5</value>
    </param>

    <param type="int" name="npiece" subparam="true">
        <description>number of element polynomials for cubic spline curve</description>
        <value>2</value>
    </param>

    <param type="bool" name="applyfft" subparam="true">
        <description>automatically set wave numbers of sinusoids</description>
        <value>True</value>
    </param>

    <param type="string" name="fftmethod" subparam="true" ignorecase="true">
        <shortdescription>method for automatically set wave numbers of sinusoids [\'fft\']</shortdescription>
        <description>method for automatically set wave numbers of sinusoids</description>
        <value>fft</value>
        <allowed kind="enum">
            <value>fft</value>
        </allowed>
    </param>

    <param type="any" name="fftthresh" subparam="true">
        <description>threshold to select wave numbers of sinusoids</description>
        <value type="double">3.0</value>
    </param>

    <param type="any" name="addwn" subparam="true">
        <description>additional wave numbers to use</description>
        <value type="vector"><value>0</value></value>
    </param>

    <param type="any" name="rejwn" subparam="true">
        <description>wave numbers NOT to use</description>
        <value type="vector"><value></value></value>
    </param>

    <param type="double" name="clipthresh" subparam="true">
        <description>clipping threshold for iterative fitting</description>
        <value>3.0</value>
    </param>

    <param type="int" name="clipniter" subparam="true">
        <description>maximum iteration number for iterative fitting</description>
        <value>0</value>
    </param>

    <param type="string" name="blparam" subparam="true">
        <description>text file that stores per spectrum fit parameters</description>
        <value></value>
    </param>

    <param type="bool" name="verify">
        <shortdescription>(NOT SUPPORTED YET) interactively verify the results of operation for each spectrum [True, False] (see description in help)</shortdescription>
        <description>(NOT SUPPORTED YET) interactively verify the results of operation for each spectrum (see description in help)</description>
        <value>False</value>
    </param>

    <param type="bool" name="verbose">
        <shortdescription>(NOT SUPPORTED YET) output fitting results to logger [True, False]</shortdescription>
        <description>(NOT SUPPORTED YET) output fitting results to logger</description>
        <value>False</value>
    </param>

    <param type="bool" name="showprogress">
        <shortdescription>(NOT SUPPORTED YET) show progress status for large data [True, False] (NOT SUPPORTED YET)</shortdescription>
        <description>(NOT SUPPORTED YET) show progress status for large data</description>
        <value>False</value>
    </param>

    <param type="int" name="minnrow" subparam="true">
        <description>(NOT SUPPORTED YET) minimum number of input spectra to show progress status</description>
        <value>1000</value>
    </param>

    <param type="string" name="outfile">
        <description>name of output file</description>
        <value></value>
    </param>

    <param type="bool" name="overwrite">
        <shortdescription>overwrite the output file if already exists [True, False] </shortdescription>
        <description>overwrite the output file if already exists</description>
        <value>False</value>
    </param>

    <constraints>
            <when param="maskmode">
                <equals value="list"/>
                <equals value="auto">
                        <default param="thresh"><value>5.0</value></default>
                        <default param="avg_limit"><value>4</value></default>
                        <default param="minwidth"><value>4</value></default>
                        <default param="edge"><value type='vector'><value>0</value><value>0</value></value></default>
                </equals>
                <equals value="interact"/>
            </when>
            <when param="blmode">
                <equals value="fit">
                        <default param="dosubtract"><value>True</value></default>
                        <default param="blformat"><value type="string">text</value></default>
                        <default param="bloutput"><value type="string"></value></default>
                </equals>
                <equals value="apply">
                        <default param="bltable"><value type="string"></value></default>
                </equals>
            </when>
            <when param="blfunc">
                <equals value="poly">
                        <default param="order"><value>5</value></default>
                        <default param="clipthresh"><value>3.0</value></default>
                        <default param="clipniter"><value>0</value></default>
                </equals>
                <equals value="chebyshev">
                        <default param="order"><value>5</value></default>
                        <default param="clipthresh"><value>3.0</value></default>
                        <default param="clipniter"><value>0</value></default>
                </equals>
                <equals value="cspline">
                        <default param="npiece"><value>2</value></default>
                        <default param="clipthresh"><value>3.0</value></default>
                        <default param="clipniter"><value>0</value></default>
                </equals>
<!--            <equals value="sinusoid">
                        <default param="applyfft"><value>True</value></default>
                        <default param="fftmethod"><value type="string">fft</value></default>
                        <default param="fftthresh"><value type="double">3.0</value></default>
                        <default param="addwn"><value type="vector"><value>0</value></value></default>
                        <default param="rejwn"><value type="vector"><value></value></value></default>
                        <default param="clipthresh"><value>3.0</value></default>
                        <default param="clipniter"><value>0</value></default>
                </equals> -->
                <equals value="variable">
                        <default param="blparam"><value type="string"></value></default>
                </equals>
            </when>
            <when param="showprogress">
                <equals type="bool" value="False"/>
                <equals type="bool" value="True">
                        <default param="minnrow"><value>1000</value></default>
                </equals>
            </when>
    </constraints>

    </input>

  <returns type="void"/>

  <example>
-----------------
Keyword arguments
-----------------
infile -- name of input SD dataset
datacolumn -- name of data column to be used
        options: 'data', 'float_data', or 'corrected'
        default: 'data'
antenna -- select an antenna name or ID
        default: 0
        example: 'PM03'
field -- select data by field IDs and names
        default: '' (use all fields)
        example: field='3C2*' (all names starting with 3C2)
                 field='0,4,5~7' (field IDs 0,4,5,6,7)
                 field='0,3C273' (field ID 0 or field named 3C273)
        this selection is in addition to the other selections to data
spw -- select data by IF IDs (spectral windows)/channels
        default: '' (use all IFs and channels)
        example: spw='3,5,7' (IF IDs 3,5,7; all channels)
                 spw='&lt;2' (IF IDs less than 2, i.e., 0,1; all channels)
                 spw='30~45GHz' (IF IDs with the center frequencies in range 30-45GHz; all channels)
                 spw='0:5~61' (IF ID 0; channels 5 to 61; all channels)
                 spw='3:10~20;50~60' (select multiple channel ranges within IF ID 3)
                 spw='3:10~20,4:0~30' (select different channel ranges for IF IDs 3 and 4)
                 spw='1~4;6:15~48' (for channels 15 through 48 for IF IDs 1,2,3,4 and 6)
        this selection is in addition to the other selections to data
timerange -- select data by time range
        default: '' (use all)
        example: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                 Note: YYYY/MM/DD can be dropped as needed:
                 timerange='09:14:00~09:54:00' # this time range
                 timerange='09:44:00' # data within one integration of time
                 timerange='&gt;10:24:00' # data after this time
                 timerange='09:44:00+00:13:00' #data 13 minutes after time
        this selection is in addition to the other selections to data
scan -- select data by scan numbers
        default: '' (use all scans)
        example: scan='21~23' (scan IDs 21,22,23)
        this selection is in addition to the other selections to data
pol -- select data by polarization IDs
        default: '' (use all polarizations)
        example: pol='0,1' (polarization IDs 0,1)
        this selection is in addition to the other selections to data
maskmode -- mode of setting additional channel masks. When blmode='apply'
             and/or blfunc='variable', maskmode and its subparameters
             are ignored.
        options: 'list' and 'auto' ('interact' will be available later)
        default: 'list'
        example: maskmode='auto' runs linefinder to detect line regions 
                 to be excluded from fitting. this mode requires three 
                 expandable parameters: thresh, avg_limit, minwidth, and edge.
                 NOTE maskmode='auto' is EXPERIMENTAL.
                 USE WITH CARE! May need to tweak the expandable parameters.
                 maskmode='list' uses the given masklist only: no additional 
                 masks applied.
                 maskmode='interact' allows users to manually modify the 
                 mask regions by dragging mouse on the spectrum plotter GUI.
                 use LEFT or RIGHT button to add or delete regions, 
                 respectively.
    &gt;&gt;&gt; maskmode expandable parameters
        thresh -- S/N threshold for linefinder. a single channel S/N ratio
                  above which the channel is considered to be a detection. 
                default: 5
        avg_limit -- channel averaging for broad lines. a number of
                     consecutive channels not greater than this parameter
                     can be averaged to search for broad lines.
                default: 4
        minwidth -- the minimum channel width to detect as a line.
                     a line with number of consecutive channels less
                     than this parameter will not be detected as a line.
                default: 4
        edge -- channels to drop at beginning and end of spectrum
                default: 0
                example: edge=[1000] drops 1000 channels at beginning AND end.
                         edge=[1000,500] drops 1000 from beginning and 500
                         from end.
        Note: For bad baselines threshold should be increased,
        and avg_limit decreased (r even switched off completely by
        setting this parameter to 1) to avoid detecting baseline
        undulations instead of real lines.
blmode -- baselining mode. 
        options: 'fit', 'apply'
        default: 'fit'
        example: blmode='fit' calculates the best-fit baseline based on 
                 given baseline type, then (if you set dosubtract=True) 
                 subtract it from each spectrum. The information about 
                 best-fit baselines (baseline type, order, coefficients, 
                 etc.) can be stored in various formats (cf. blformat).
                 blmode='apply' reads a baseline table as well as input 
                 MS, reproduces the best-fit baseline via info written 
                 in the baseline table, then subtracts it from each 
                 spectrum. 
    &gt;&gt;&gt; blmode expandable parameters
        dosubtract -- execute baseline subtraction in addition to fitting.
                      Note that dosubtract=False will be ignored if 
                      bloutput is given, that is, baseline subtraction 
                      will be always executed for the input MS in case 
                      bloutput is not specified.
                options: (bool) True, False
                default: True
        blformat -- format(s) of file(s) in which best-fit parameters are 
                    written. 
                options: 'text', 'csv', 'table', '', and a list of these 
                         available formats except for ''.
                default: 'text'
                example: blformat='text' outputs an ascii text file with 
                         the best-fit baseline parameters written in 
                         human-readable format. may be good to read, but 
                         you should mind it might be huge.
                         blformat='csv' outputs a CSV file.
                         blformat='table' outputs a baseline table which 
                         can be used to apply afterwards.
                         blformat='' or a list including '' such as ['csv',''] 
                         doesn't output any parameter file.
                         blformat=['csv','table'] outputs both a CSV 
                         file and a baseline table.
        bloutput -- name(s) of file(s) in which best-fit parameters are 
                    written. If bloutput is '', name(s) of baseline 
                    parameter file(s) will be set as follows: 
                    &lt;outfile&gt;_blparam.txt for blformat='text', 
                    &lt;outfile&gt;_blparam.csv for blformat='csv', and 
                    &lt;outfile&gt;_blparam.bltable for blformat='table'.
                    In case bloutput is not '', blformat and bloutput 
                    must have the same length.
                default: ''
        bltable -- name of baseline table to apply
                default: ''
blfunc -- baseline model function. In cases blmode='apply' or blparam is 
          set, blfunc and its subparameters are ignored.
        options: 'poly', 'chebyshev', 'cspline', 'sinusoid' or 'variable'
        default: 'poly'
        example: blfunc='poly' uses a single polynomial line of 
                 any order which should be given as an expandable 
                 parameter 'order' to fit baseline. 
                 blfunc='chebyshev' uses Chebyshev polynomials. 
                 blfunc='cspline' uses a cubic spline function, a piecewise 
                 cubic polynomial having C2-continuity (i.e., the second 
                 derivative is continuous at the joining points). 
                 blfunc='sinusoid' uses a combination of sinusoidal curves. 
        NOTE blfunc='variable' IS EXPERT MODE!!!
    &gt;&gt;&gt; blfunc expandable parameters
        order -- order of baseline model function
                options: (int) (&lt;0 turns off baseline fitting)
                default: 5
                example: typically in range 2-9 (higher values
                         seem to be needed for GBT)
        npiece -- number of the element polynomials of cubic spline curve
                options: (int) (&lt;0 turns off baseline fitting)
                default: 2
        applyfft -- automatically set wave numbers of sinusoidal functions 
                    for fitting by applying some method like FFT.
                options: (bool) True, False
                default: True
        fftmethod -- method to be used when applyfft=True. Now only 
                     'fft' is available and it is the default.
        fftthresh -- threshold to select wave numbers to be used for 
                     sinusoidal fitting. both (float) and (str) accepted.
                     given a float value, the unit is set to sigma.
                     for string values, allowed formats include:
                     'xsigma' or 'x' (= x-sigma level. e.g., '3sigma'), or
                     'topx' (= the x strongest ones, e.g. 'top5').
                default is 3.0 (unit: sigma).
        addwn -- additional wave number(s) of sinusoids to be used 
                 for fitting. 
                 (list) and (int) are accepted to specify every
                 wave numbers. also (str) can be used in case
                 you need to specify wave numbers in a certain range.
                 default: [0] (i.e., constant is subtracted at least)
                 example: 0
                          [0,1,2]
                          'a-b' (= a, a+1, a+2, ..., b-1, b),
                          '&lt;a'  (= 0,1,...,a-2,a-1),
                          '&gt;=a' (= a, a+1, ... up to the maximum wave
                                   number corresponding to the Nyquist
                                   frequency for the case of FFT).
        rejwn -- wave number(s) of sinusoid NOT to be used for fitting.
                 can be set just as addwn but has higher priority:
                 wave numbers which are specified both in addwn
                 and rejwn will NOT be used. 
                 default: []
        clipthresh -- clipping threshold for iterative fitting
                 default: 3
        clipniter -- maximum iteration number for iterative fitting
                 default: 0 (no iteration, i.e., no clipping)
        blparam -- the name of text file that stores per spectrum fit
                   parameters. See below for details of format.
verify -- (NOT SUPPORTED YET) interactively verify the results of operation for each spectrum.
          When verify = True, for each input spectrum, spectra 
          before and after the operation are displayed in a plot
          window. At the prompt there are four choices of action:
          'Y' (accept the operation and continue to the next input
          spectrum), 'N' (reject the operation and continue to the 
          next input spectrum), 'A' (accept the current operation
          and continue non-interactively), and 'R' (reject the
          current operation and exit from operation).
          Note that when the operation is rejected by 'N' or 'R',
          no operation is done to the spectrum/spectra.
        options: (bool) True,False
        default: False
        NOTE: Currently available only when blfunc='poly'
verbose -- (NOT SUPPORTED YET) output fitting results to logger. if False, the fitting results
           including coefficients, residual rms, etc., are not output to
           the CASA logger, while the processing speed gets faster.
        options: (bool) False
        default: False (verbose=True is currently unavailable)
showprogress -- (NOT SUPPORTED YET) show progress status for large data
        options: (bool) False (this capability is currently unavailable.)
        default: False
    &gt;&gt;&gt; showprogress expandable parameter
        minnrow -- (NOT SUPPORTED YET) minimum number of input spectra to show progress status
                 default: 1000
outfile -- name of output file
        default: '' (&lt;infile&gt;_bs)
overwrite -- overwrite the output file if already exists
        options: (bool) True, False
        default: False
        NOTE this parameter is ignored when outform='ASCII'


-----------
DESCRIPTION
-----------

Task tsdbaseline performs baseline fitting/subtraction for single-dish spectra.
The fit parameters, terms and rms of baseline can be saved into an ascii file 
or baseline table. Subtracting baseline from data in input MS using existing 
baseline table is also possible.

-----------------------
BASELINE MODEL FUNCTION
-----------------------
The list of available model functions are shown above (see Keyword arguments
section). In general 'cspline' or 'chebyshev' are recommended since they are
more stable than others. 'poly' will work for lower order but will be unstable
for higher order fitting. 'sinusoid' is kind of special mode that will be
useful for the data that clearly shows standing wave in the spectral baseline.

----------------------------------
SIGMA CLIPPING (ITERATIVE FITTING)
----------------------------------
In general least square fitting is strongly affected by an extreme data
so that the resulting fit makes worse. Sigma clipping is an iterative
baseline fitting with data clipping based on a certain threshold. Threshold
is set as a certain factor times rms of the resulting (baseline subtracted)
spectra. If sigma clipping is on, baseline fit/removal is performed several
times. After each baseline subtraction, the data whose absolute value is
above threshold are detected and those data are excluded from the next round
of fitting. By using sigma clipping, extreme data are excluded from the
fit so that resulting fit is more robust.

The user is able to control a multiplication factor using parameter
clipthresh for clipping threshold based on rms. Actual threshold for sigma
clipping will be (clipthresh) x (rms of spectra). Also, the user can specify
number of maximum iteration to the parameter clipniter.

In general, sigma clipping will lower the performance since it increases
number of fits per spectra. However, it is strongly recommended to turn
on sigma clipping unless you are sure that the data is free from any kind
of extreme values that may affect the fit.


----------------------------------
PER SPECTRUM FIT PARAMETERS
----------------------------------
Per spectrum baseline fitting parameter is accepted in blfunc='variable'.
Note this is an expert mode. The fitting parameters should be defined in
a text file for each spectrum in the input MS. The text file should store
commpa separated values in order of:
row ID, polarization ID, masklist, blfunc, order, npiece, nwave,clipthresh,
clipniter, use_linefinder, thresh, edge, chan_avg_limit.
Each row in the text file must contain the following keys and values:
* 'row': row number,
* 'blfunc': function name.
     available ones include, 'poly', 'chebyshev', 'cspline' and 'sinusoid', 
* 'order': maximum order of polynomial. needed when blfunc='poly'
     or 'chebyshev', 
* 'npiece': number or piecewise polynomial. needed when blfunc='cspline',
and
* 'nwave': a list of sinusoidal wave numbers. needed when blfunc='sinusoid'.

example:
#row,pol,masklist,blfunc,order,npiece,nwave,clipthresh,clipniter,use_lf,thres,edge,avg_limit
0,0,[[500,1600]],poly,5,,,,,,,,
0,1,,chebyshev,10,,,,,,,,
1,0,,cspline,,4,,,,,,,
1,1,,sinusoid,,,[0,1,2,3],,,,,,

  </example>

</task>

</casaxml>
