#!/usr/bin/perl

use File::Basename;
use File::Find;
use File::Path;
use Cwd;

$lib = '';
$bit = '';
$dumpdir = '';
$tmp = "/tmp";
$cbt_bundle = '/home/warp/casa/jenkins/work/userContent/promotion/stage01/current.tar.gz';
$cbt_output = '/home/warp/casa/jenkins/work/userContent/promotion/stage01/distro';
$rpmdir_root = '/home/svn.cv.nrao.edu/content/casa/repo';

$id = basename($0) . ".$$";
die "bad base identifier..." if $id =~ m@/@;

##
## set $arch
##
$arch_line = `uname -m`;
if ( $arch_line =~ m/x86_64/ ) {
    $arch = "x86_64";
    $bit = '-64b';
    $lib = '64';
} else {
    $arch = "i386";
}

$tag = '';
$version = '';
$argv_rpmdir = '';
while ($_ = @ARGV[0], (/^--/)) {
    shift(@ARGV);
    last if /^--$/;
    /^--dir$/i && ($dumpdir = shift(@ARGV), next);
    /^--repo$/i && ($argv_rpmdir = shift(@ARGV), next);
    /^--rpmdir$/i && ($argv_rpmdir = shift(@ARGV), next);
    /^--version$/i && ($version = shift(@ARGV), next);
    /^--tag$/i && ($tag = '-' . shift(@ARGV), next);

    die "unknown option: $_\n";
}

die "no version specified (via --version)..." unless "$version";
die "output directory ($dumpdir) not a directory..." if $dumpdir && ! -d $dumpdir;
$dumpdir = "$cbt_output" unless $dumpdir;

%rpmdir = ( 'el5' => "$rpmdir_root/el5/$arch"  );

%pyversion = ( 'el5' => '2.6' );

%constituent = ( 'el5' => [ "casapy-python",
			    "casapy-python-devel",		# Python.h
			    "antlr-c++-shared",
			    "casapy-boost141-date-time",
			    "casapy-boost141-devel",
			    "casapy-boost141-filesystem",
			    "casapy-boost141-graph",
			    "casapy-boost141-iostreams",
			    "casapy-boost141-program-options",
			    "casapy-boost141-python",
			    "casapy-boost141-regex",
			    "casapy-boost141-serialization",
			    "casapy-boost141-signals",
			    "casapy-boost141-system",
			    "casapy-boost141-test",
			    "casapy-boost141-thread",
			    "casapy-boost141-wave",
			    "xerces-c28-libs",
			    "aatm",
			    "wcslib",
			    "wcslib-devel",
			    "fftw3",
			    "cfitsio",
			    "rpfits",
			    "nas",
			    "qt471",
			    "qt471-x11",
			    "qt471-qwt",
			    "dbus-c++",
			    "tix",
			    "blas",
			    "lapack",
			    "readline",
			    "libtermcap",
			    "libtermcap-devel",
			    "libgfortran",
			    "tcl",
			    "tk",
			    "xorg-x11-server-Xvfb",
			    "libpng",
			    "dbus",
			    "dbus-libs",
			    "dbus-glib",
			    "libXau",
			    "libcap",
			    "libxslt",
                            "ncurses",
                            "ncurses-devel",
                            "almawvr",
                            "pgplot",
			    "libxml2",
			    "libgsl",
			    "libgslcblas",
			    ]
 );


%preload = ( 'el5' => [ "libpython$pyversion{'el5'}.so", 'libQtCore.so.4.7.1', 'libQtGui.so.4.7.1', 'libQtSvg.so.4.7.1',
			'libQtXml.so.4.7.1', 'libQtDBus.so.4.7.1',
			'libcasa_casa.so', 'libcasa_coordinates.so', 'libcasa_fits.so', 'libcasa_lattices.so',
			'libcasa_mirlib.so', 'libcasa_ms.so', 'libcasa_scimath.so', 'libcasa_components.so',
			'libcasa_derivedmscal.so', 'libcasa_images.so', 'libcasa_measures.so', 'libcasa_msfits.so',
			'libcasa_scimath_f.so', 'libcasa_tables.so',
			'libcfitsio.so.0', 'libboost_python-mt.so.5',
			'libfftw3_threads.so.3', 'libfftw3f_threads.so.3', 'libfftw3f.so.3', 'libfftw3.so.3',
			'libair_casawvr.so', 'libalma.so', 'libasap.so', 'libasdmstman.so', 'libatnf.so', 'libcalanalysis.so',
			'libcasadbus.so', 'libcasaqt.so', 'libcomponents.so', 'libdish.so', 'libdisplay.so', 'libflagging.so',
			'libgraphics.so', 'libguitools.so', 'libimageanalysis.so', 'libmiriad.so', 'libmstransform.so',
			'libnrao.so', 'libplotms.so', 'libpyrap.so', 'libspectrallines.so', 'libstdcasa.so', 'libsynthesis.so',
			'libtools.so', 'libtransformvis.so', 'libxml2' ],
	   );

%extra_script = ( );

#$extra_script{'casapy'} = 'watchdog( ) {
#    ppid=$1
#    while true; do
#	if ! kill -s 0 $ppid > /dev/null 2>&1; then
#	    break
#	fi
#	sleep 15
#    done
#    kill -s TERM -- -$ppid
#    sleep 15
#    kill -s KILL -- -$ppid
#}
#
#
#watchdog $$ &
#';


%mask_casapy_scripts = ( "lib$lib/exec/ipengine" => "lib$lib/casapy/bin/ipengine",
			 "lib$lib/exec/ipcontroller" => "lib$lib/casapy/bin/ipcontroller",
			 'casapy' => "lib$lib/python$pyversion{$rhver}/casapy.py",
			 'casa' => "lib$lib/python$pyversion{$rhver}/casapy.py" );
@wrappers = ( 'asdm2MS', 'bdflags2MS', 'casabrowser', 'casafeather', 'casalogger', 'casaplotms', 'casaviewer' );

$rhver = "";

if ( ! $rhver ) {

    if ( -f "/etc/SuSE-release" ) {

        $rhver = "suse";

    } elsif ( -f "/etc/redhat-release" ) {

        open( IN, "</etc/redhat-release" );
        $rhver = <IN>;
        close( IN );
        if ( $rhver =~ m/^Red Hat Enterprise.*release 5/ ) {
            $rhver = "el5";
        } elsif ( $rhver =~ m/^Scientific Linux SL release 5.*/ ) {
            $rhver = "el5";
        } elsif ( $rhver =~ m/^Red Hat Enterprise/ ) {
            die "unknown enterprise version: $rhver";
        } elsif ( $rhver =~ m/^Red Hat Linux release ([0-9.]+)/ ) {
            die "we no longer support: $rhver";
        } elsif ( $rhver =~ m/^Mandrake Linux/  ) {
            die "we don't yet support mandrake";
        } else {
            die "cannot understand version string: $rhver";
        }

    } else {

        die "we're not in linux land";

    }
}

die "cant build on $rhver" unless $rhver eq "el5";

sub move_files {
    my $fromvec = shift(@_);
    my $tovec = shift(@_);
    while ( scalar(@$fromvec) > 0 && scalar(@$tovec) > 0 ) {
	my $from = shift(@$fromvec);
	my $to = shift(@$tovec);
	my $dir = dirname($to);

	die "rogue destination path: $dir" unless $dir =~ m@^$tmp/$id@ || $dir =~ m@^[^/.]@;

	if ( ! -e $dir ) {
	    die "could not create $dir" unless mkpath $dir;
	}

	die "failed to move:\t$from\nto\t$to" unless rename($from,$to);
    }
}

$constituents = $constituent{$rhver};
@rpms = ( );
%rpms = ( );

sub find_rpms {
    if ( -f "$File::Find::dir/$_" && $_ =~ m/\.rpm$/ && $_ !~ m/\.src\.rpm$/ ) {
	push( @rpms, "$File::Find::dir/$_" );
    }
}

find( { wanted => \&find_rpms, follow => 1 }, ($argv_rpmdir ? $argv_rpmdir : $rpmdir{$rhver}) );


##
## rpm just can't be kept from writing stuff to stderr...
## even the redirection below was ineffective...
##
close(STDERR);

foreach $rpm ( @rpms ) {
    open( ARCH, "/bin/rpm -qp --qf \"%{ARCH}\" $rpm 2> /dev/null |" );
    my $rpm_arch = <ARCH>;
    close(ARCH);
    next unless $rpm_arch eq $arch;
    open( NAME, "/bin/rpm -qp --qf \"%{NAME}\" $rpm 2> /dev/null |" );
    $name = <NAME>;
    close(NAME);
    $rpms{$name} = $rpm;
    print ".";
}

#$version =~ s/\.[^.]+$//;

$constituents = $constituent{$rhver};

mkpath "$tmp/$id/casapy$tag-$version$bit";
chdir "$tmp/$id/casapy$tag-$version$bit";
system( "/bin/rm -rf *" );

foreach $rpm ( @$constituents ) {
    print "_";
    print "*";
    print "$rpm";
    print "*";
    print "_";
    open( EXTRACT, "rpm2cpio $rpms{$rpm} | cpio -ivd |" );
    while ( <EXTRACT> ) {
	print;
    }
}

open STDERR, ">>&STDOUT" or die "Can't redirect STDERR: $!";

##
## rename qcasabrowser
##
sub rename_qcasabrowser {
    if ( ! -d $_ && $_ eq "qcasabrowser" ) {
	if ( -e "casabrowser" ) {
	    system( "rm -rf casabrowser" );
	}
	rename( "qcasabrowser", "casabrowser" );
    }
}
find( { wanted => \&rename_qcasabrowser }, "." );

if ( -e "lib" ) {
    if ( -d "lib" ) {
	if ( ! -d "usr/lib" ) { mkpath "usr/lib"; }
	system( "mv lib/* usr/lib" );
    }
    system("rm -rf lib");
}

if ( -e "lib64" ) {
    if ( -d "lib64" ) {
	if ( ! -d "usr/lib64" ) { mkpath "usr/lib64"; }
	system( "mv lib64/* usr/lib64" );
    }
    system("rm -rf lib64");
}

system( "mv usr/* . && rmdir usr" );
system( "mv lib$lib libsource" );

mkpath "lib$lib/casapy";

@from = ();
@to = ();
sub find_libs {
    if ( -f $_ || -l $_ ) {
	if ( ( m/\.tar\.gz$/ ) ||
	     ( m/casainit/ )  ){
	    return;
	}
	my $newdir = $File::Find::dir;
	$newdir =~ s/libsource/lib$lib/;
	push( @from, "$File::Find::dir/$_" );
	if ( $File::Find::dir =~ m@/include/casapy/@ ) {
	    $newdir =~ s@.*?/include/casapy/@include/casa/@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/include/@ ) {
	    $newdir =~ s@.*?/include/@include/@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/etc/dbus@ ) {
	    push( @to, "$tmp/$id/casapy$tag-$version$bit/etc/dbus/$_" );
	} elsif ( $File::Find::dir =~ m@/templates/@ ) {
	    $newdir =~ s@.*?/templates/@templates/@;
	    push( @to, "$newdir/$_" );
	} elsif ( "$File::Find::dir/$_" =~ m@/bin/ccmtools@ ) {
	    $newdir =~ s@.*?/bin@binaddin@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/python@ ) {
	    $newdir =~ s@.*?/python@lib$lib/python@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/bin@ ) {
	    $newdir =~ s@.*?/bin@lib$lib/casapy/bin@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/java@ ) {
	    $newdir =~ s@.*?/java@java@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/pgplot@ ) {
	    $newdir = "lib$lib/pgplot";
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/share@ ) {
	    $newdir =~ s@.*?/share@share@;
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/qt-\d+\.\d+\.\d+/plugins@ ) {
	    ## qt plugins also match the next pattern
	    push( @to, "$newdir/$_" );
	} elsif ( m/libTix/ && -f $_ ) {
	    if ( -l $_ ) {
		pop( @from );
	    } else {
		push( @to, "$tmp/$id/casapy$tag-$version$bit/lib$lib/$_" );
	    }
	} elsif ( m/^lib.*\.so.*/ || m/\.jnilib.*/ ) {
	    push( @to, "$tmp/$id/casapy$tag-$version$bit/lib$lib/$_" );
	} elsif ( m/\.jar$/ ) {
	    push( @to, "$tmp/$id/casapy$tag-$version$bit/java/$_" );
	} elsif ( $File::Find::dir =~ m/plugin/ ) {
	    push( @to, "$newdir/$_" );
	} elsif ( $File::Find::dir =~ m@/\d\d\.\d\.\d\d\d\d\-\d\d\d@ ) {
	    push( @to, "lib$lib/casapy/$_" );
	} else {
	    push( @to, "$newdir/$_" );
	}
    }
}

sub find_casapy_paths {
    ###
    ### find binary path...
    ###
    if ( $_ eq "casapy" && $File::Find::dir =~ m/linux/ ) {
	if ( -l $_ ) {
	    ### we really don't need multiple ways of starting casa...
	    my $file = readlink($_);
	    if ( -e $file ) {
		unlink($_);
		rename $file, $_;
	    }
	}
	$casapy_binary_path="$File::Find::dir";
    }
    ###
    ### find binary path...
    ###
    if ( $_ eq "libcasadbus.so" && $File::Find::dir =~ m/linux/ ) {
	$casapy_library_path="$File::Find::dir";
    }
    ###
    ### find script path...
    ###
    if ( $_ eq "casapy.py" && $File::Find::dir =~ m/linux/ ) {
	$casapy_script_path="$File::Find::dir";
    }
    ###
    ### find xml path...
    if ( $_ eq "clean.xml" && $File::Find::dir =~ m/linux/ ) {
	$casapy_xml_path="$File::Find::dir";
    }
}

sub move_casapy_files {
    die "invalid destination for casapy binaries: $casapy_binary_destination"  unless -d $casapy_binary_destination;
    if ( $File::Find::dir eq $casapy_binary_path ) {
	rename $_, "$casapy_binary_destination/$_";
    } elsif ( $File::Find::dir eq $casapy_library_path ) {
	rename $_, "$casapy_library_destination/$_";
    } elsif ( $File::Find::dir eq $casapy_script_path ) {
	if ( m|\.py$| ) {
	    ###
	    ### original text looks like:
	    ###
	    ### pathname='file:///'+os.environ.get('CASAPATH').split()[0]+'/'+os.environ.get('CASAPATH').split()[1]+'/xml/'
	    ###
	    open( INPY, "< $_" );
	    open( OUTPY, "> $casapy_script_destination/$_" );
	    foreach $line ( <INPY> ) {
		$line =~ s|\Qfile:///'+os.environ.get('CASAPATH').split()[0]+'/'+os.environ.get('CASAPATH').split()[1]+\E|file:///'+os.environ.get('CASAPATH').split()[0]+|;
		print OUTPY $line;
	    }
	    close(OUTPY);
	    close(INPY);
	} elsif ( ! m|\.pyc$| && ! m|\.pyo$| ) {
	    rename $_, "$casapy_script_destination/$_";
	}
    } elsif ( $File::Find::dir eq $casapy_xml_path ) {
	rename $_, "$casapy_xml_destination/$_";
    }
}

find( { wanted => \&find_libs }, "libsource" );
move_files(\@from,\@to);

system( "rm -rf libsource" );
system( "rm -f `find . -type f -name 'lib*.a'`" );
rmdir( "lib/casapy/lib" );

mkpath "casa-distro";
chdir  "casa-distro";
system( "tar -zxf $cbt_bundle" );
$casapy_binary_path="";
$casapy_library_path="";
$casapy_script_path="";
$casapy_xml_path="";
find( { wanted => \&find_casapy_paths }, "." );
$casapy_binary_destination = getcwd . "/../lib64/casapy/bin";
mkpath $casapy_binary_destination;
$casapy_library_destination = getcwd . "/../lib64";
$casapy_script_destination = getcwd . "/../lib64/python2.6";
mkpath $casapy_script_destination;
$casapy_xml_destination = getcwd . "/../xml";
mkpath $casapy_xml_destination;
find( { wanted => \&move_casapy_files }, "." );
chdir "$tmp/$id/casapy$tag-$version$bit";
system("rm -rf casa-distro");

##
## set up preload state for wrappers...
##
$preload="";
$epreload="";
if ( defined $preload{$rhver} ) {
    my $pl = $preload{$rhver};
    foreach $l ( @$pl ) {
	if ( $preload ) {
	    $preload .= " ";
	} else {
	    $preload = 'LD_PRELOAD="';
	}
	$preload .= "\$installpath/lib$lib/$l";
    }
}
if ( $preload ) {
    $preload .= '"';
    $epreload = "export $preload";
}

##
## patch wrapper scripts
##
foreach $script ( @wrappers ) {

    my $extra = '';
    if ( defined $extra_script{$script} ) {
	$extra = $extra_script{$script};
    }

    unlink( "bin/$script$tag" );
    open(NEW, "> $script");

    ##
    ## with casapy we need to specify the path, but not with the rest
    ##
    my $path_param = "";
    my $pythonpath_reset = "";
    if (( $script eq "casa" ) || ( $script eq "casapy" )) {
	$pythonpath_reset = "PYTHONPATH=\$installpath/lib$lib/python$pyversion{$rhver}:\$installpath/lib$lib/python$pyversion{$rhver}/heuristics:\$installpath/lib$lib/python$pyversion{$rhver}/site-packages:\$_PYTHONPATH";
    } else {
	$pythonpath_reset = "unset PYTHONPATH";
    }
    print NEW <<EOF;
#!/bin/sh
# Generated by scripts/userdistro.  Do not edit.
export CASA_INSTALLATION_TYPE="tar-installation"

name="\$0"
while test -L "\$name"; do
    newname=`readlink \$name`
    name=`cd -P -- "\$(dirname -- "\$name")" && cd -P -- "\$(dirname -- "\$newname")" && echo \$(pwd -P)`/\$(basename -- \$name)
done

path=\$(dirname -- "\$name")
installpath=`cd -P -- "\$path" && echo \$(pwd -P)`

LD_LIBRARY_PATH=\$installpath/lib$lib:/lib$lib:/usr/lib$lib:\$LD_LIBRARY_PATH
CASAPATH="\$installpath `uname -s | tr [:upper:] [:lower:]` local `uname -n`"
PATH="\$installpath/lib$lib/exec:\$installpath/lib$lib/casapy/bin:/usr/bin:/usr/X11R6/bin:\$PATH"

if [ -z "\$MATPLOTLIBRC" ]; then
    MATPLOTLIBRC="\$installpath/share/matplotlib"
fi
PYTHONHOME=\$installpath

_PYTHONPATH=\$PYTHONPATH
$pythonpath_reset

TCL_LIBRARY="\$installpath/share/tcl8.4"
QT_PLUGIN_PATH="\$installpath/lib$lib/qt-4.7.1/plugins"
__CASAPY_PYTHONDIR="\$installpath/lib$lib/python$pyversion{$rhver}"

PGPLOT_FONT=\$installpath/lib$lib/pgplot/grfont.dat
PGPLOT_DIR=\$installpath/lib$lib
PGPLOT_RGB=\$installpath/lib$lib/pgplot/rgb.txt
export PGPLOT_FONT PGPLOT_DIR PGPLOT_RGB

export QT_PLUGIN_PATH TCL_LIBRARY CASAPATH PATH LD_LIBRARY_PATH MATPLOTLIBRC PYTHONHOME __CASAPY_PYTHONDIR

$extra

$epreload

#
# Environment is now set up.
exec \$installpath/lib$lib/casapy/bin/$script \$*
EOF

    close( NEW );
    system("chmod 755 $script");
}

##
## wrap up required python scripts
##
mkpath "lib$lib/exec";			### location of ipcontroller/ipengine...

foreach $script ( keys %mask_casapy_scripts ) {

    ###
    ### if the script we're wrapping is beneath the top directory,
    ### we hae to get back to the top...
    ###
    my $relpath = $script;
    $relpath =~ s|[^/]||g;
    my @relpath = map {$_ = '..'; $_} split('',$relpath);
    $relpath = join('/',@relpath);
    if ( $relpath ) { $relpath = '/' . $relpath; }

    my $extra = '';
    if ( defined $extra_script{$script} ) {
	$extra = $extra_script{$script};
    }

    unlink( "bin/$script$tag" );
    open(NEW, "> $script");

    ##
    ## with casapy we need to specify the path, but not with the rest
    ##
    my $path_param = "";
    my $pythonpath_reset = "";
    if (( $script eq "casa" ) || ( $script eq "casapy" )) {
	$pythonpath_reset = "PYTHONPATH=\$installpath/lib$lib/python$pyversion{$rhver}:\$installpath/lib$lib/python$pyversion{$rhver}/heuristics:\$installpath/lib$lib/python$pyversion{$rhver}/site-packages:\$_PYTHONPATH";
    } else {
	$pythonpath_reset = "unset PYTHONPATH";
    }
    print NEW <<EOF;
#!/bin/sh
# Generated by scripts/userdistro.  Do not edit.
export CASA_INSTALLATION_TYPE="tar-installation"

name="\$0"
while test -L "\$name"; do
    newname=`readlink \$name`
    name=`cd -P -- "\$(dirname -- "\$name")" && cd -P -- "\$(dirname -- "\$newname")" && echo \$(pwd -P)`/\$(basename -- \$name)
done

path=\$(dirname -- "\$name")
installpath=`cd -P -- "\$path$relpath" && echo \$(pwd -P)`

LD_LIBRARY_PATH=\$installpath/lib$lib:/lib$lib:/usr/lib$lib:\$LD_LIBRARY_PATH
CASAPATH="\$installpath `uname -s | tr [:upper:] [:lower:]` local `uname -n`"
PATH="\$installpath/lib$lib/exec:\$installpath/lib$lib/casapy/bin:/usr/bin:/usr/X11R6/bin:\$PATH"

if [ -z "\$MATPLOTLIBRC" ]; then
    MATPLOTLIBRC="\$installpath/share/matplotlib"
fi
PYTHONHOME=\$installpath

_PYTHONPATH=\$PYTHONPATH
$pythonpath_reset

TCL_LIBRARY="\$installpath/share/tcl8.4"
QT_PLUGIN_PATH="\$installpath/lib$lib/qt-4.7.1/plugins"
__CASAPY_PYTHONDIR="\$installpath/lib$lib/python$pyversion{$rhver}"

PGPLOT_FONT=\$installpath/lib$lib/pgplot/grfont.dat
PGPLOT_DIR=\$installpath/lib$lib
PGPLOT_RGB=\$installpath/lib$lib/pgplot/rgb.txt
export PGPLOT_FONT PGPLOT_DIR PGPLOT_RGB

export QT_PLUGIN_PATH TCL_LIBRARY CASAPATH PATH LD_LIBRARY_PATH MATPLOTLIBRC PYTHONHOME __CASAPY_PYTHONDIR

$extra

$epreload

#
# Environment is now set up.
exec \$installpath/lib$lib/casapy/bin/python \$installpath/$mask_casapy_scripts{$script} \$*
EOF

    close( NEW );
    system("chmod 755 $script");
}

##
## we don't need the rest of the stuff in bin...
##
system( "rm -rf bin" );

chdir "lib$lib";

##
## the libcrypto.so.4 symlink is set outside of the rpms
##
if ( $rhver eq "el5" ) {
    die "can't set up hashlib" if system "cp /lib$lib/libcrypto.so.6 .";
    die "can't set up hashlib" if system "cp /lib$lib/libssl.so.6 .";
    die "can't copy libgomp" if system "cp /usr/lib$lib/libgomp.so.1 .";
} else {
    die "untested hashlib architecture";
}

if ( -e "libg2c.so.0.0.0" ) {
    system( "ln -s libg2c.so.0.0.0 libg2c.so" );
}


##
## something seems to be preloading libpython.so:
##
##    CASA <2>: async=T
##    CASA <3>: vis='ic2233_1.ms'
##    CASA <4>: listobs
##    --------> listobs()
##    2010-10-08 13:25:52	WARN	taskmanager::::casa	ERROR: ld.so: object '/export/data/casa/dschieb/casa/testing/casapy-test-31.0.13058-001-64b/lib64/libpython.so' from LD_PRELOAD cannot be preloaded: ignored.
##    Use:
##          tm.retrieve(return_value) # to retrieve the status
##
##      Out[4]: 0
##
##    CASA <5>:
##
if ( -e 'libpython2.6.so' ) {
    system( "ln -f -s libpython2.6.so libpython.so" );
} elsif ( -e 'libpython2.5.so' ) {
    system( "ln -f -s libpython2.5.so libpython.so" );
}

##
## making this look like an casapy-acs
## tree for possible reuse...
##
system( "ln -s python$pyversion{$rhver} python" );
chdir "..";
if ( -l "lib/tcl8.4" ) {
    unlink( "lib/tcl8.4" );
}
if ( "$lib" eq "64" ) {
   system("rm -rf lib");
   if ( -d "lib64" ) {
       system( "ln -s lib64 lib" );
   }
}
mkpath "bin";
chdir "bin";
foreach $script ( @wrappers ) {
    system( "ln -s ../$script" );
}
system( "ln -s ../casapyinfo" );
chdir "..";
system( "mv binaddin/* bin" );
rmdir( "binaddin" );

##
## retrieve version of data repository which can be updated with SVN
##
open( DATA, "svn co https://svn.cv.nrao.edu/svn/casa-data/distro data 2>&1 |" );
$count = 0;
while ( <DATA> ) { print "." if ++$cout % 5 == 0; }
close( DATA );

system( "rm -rf share/man" );

##
## write matplotlib rc file which sets the backend
##
mkpath "share/matplotlib";
open( MAT, "> share/matplotlib/matplotlibrc" );
print MAT "backend: TkAgg\n";
#.#print MAT "numerix: numpy\n";
close(MAT);

##
## get RPM info from old casapyinfo
##
$infoVERSION="";
$infoHOST="";
$infoSVNROOT="";
$infoSVNVERSION="";
$VERSIONfile=`find "lib$lib" -type f -name VERSION`;
$VERSIONfile =~ s/\n//g;
$makedefsfile=`find "lib$lib" -type f -name makedefs`;
$makedefsfile =~ s/\n//g;
open(INFO,"< lib$lib/casapy/bin/casapyinfo");
while ( <INFO> ) {
    if ( m|^VERSION=| ) {
	$infoVERSION=$_;
    } elsif ( m|^HOST=| ) {
	$infoHOST=$_;
    } elsif ( m|^SVNROOT=| ) {
	$infoSVNROOT=$_;
    } elsif ( m|^SVNVERSION=| ) {
	$infoSVNVERSION=$_;
    }

}
close(INFO);
unlink("lib$lib/casapy/bin/casapyinfo");

##
## write out new casapyinfo
##
open( INFO, "> casapyinfo" );
    print INFO <<EOF;
#!/bin/sh
# Generated by scripts/userdistro.  Do not edit.

name="\$0"
while test -L "\$name"; do
    newname=`readlink \$name`
    name=`cd -P -- "\$(dirname -- "\$name")" && cd -P -- "\$(dirname -- "\$newname")" && echo \$(pwd -P)`/\$(basename -- \$name)
done

path=\$(dirname -- "\$name")
installpath=`cd -P -- "\$path" && echo \$(pwd -P)`

$infoVERSION
$infoSVNROOT
$infoSVNVERSION
$infoHOST

usage() {
    echo "casapyinfo [--help|--data|--keys|--version|--rpmversion|--environ|--makedefs]"
    echo "    --help:        usage info"
    echo "    --data:        location of the data repository"
    echo "    --keys:        location of the glish keys"
    echo "    --version:     casa version info"
    echo "    --rpmversion:  casa version info"
    echo "    --svnroot:     svn url for source"
    echo "    --buildhost:   build host info"
    echo "    --environ:     show support environment (this is automatically"
    echo "                   set up for standard binaries)"
    echo "    --makedefs:    dump build makedefs"
    echo "    --exec STRING: export casa environment and then exec STRING"
}

if [ "\$#" -eq 0 ]; then
    usage
fi

exec_str=""

while [ "\$#" -gt 0 ]; do
    case \$1 in
	--data)
		echo "\$installpath/data"
		shift;
		;;
	--keys)
		echo ""
		shift;
		;;
	--version)
		cat "\$installpath/$VERSIONfile" | perl -pe 's|^([0-9])([0-9])\.([0-9]+).*|\$1.\$2.\$3|'
		shift
		;;
	--rpmversion)
		echo "\$VERSION"
		shift
		;;
	--svnroot)
		echo "\$SVNROOT"
		shift
		;;
	--svnversion)
		echo "\$SVNVERSION"
		shift
		;;
	--buildhost)
		echo "\$HOST"
		shift
		;;
	--makedefs)
		cat "\$installpath/$makedefsfile"
		shift
		;;
	--environ)
		echo "LD_LIBRARY_PATH=\$installpath/lib$lib:/lib$lib:/usr/lib$lib:\\\$LD_LIBRARY_PATH"
		echo "CASAPATH=\"\$installpath `uname -s | tr [:upper:] [:lower:]` local `uname -n`\""
		echo "PATH=\$installpath/lib$lib/exec:\$installpath/lib$lib/casapy/bin:/usr/bin:/usr/X11R6/bin:\\\$PATH"
		echo "PYTHONHOME=\$installpath"
		echo "_PYTHONPATH=\\\$PYTHONPATH"
		echo "unset PYTHONPATH"
		echo "TCL_LIBRARY=\$installpath/share/tcl8.4"
		echo "QT_PLUGIN_PATH=\$installpath/lib$lib/qt-4.7.1/plugins"
		echo "__CASAPY_PYTHONDIR=\$installpath/lib$lib/python$pyversion{$rhver}"
		echo "PGPLOT_FONT=\$installpath/lib$lib/pgplot/grfont.dat"
                echo "PGPLOT_DIR=\$installpath/lib$lib"
                echo "PGPLOT_RGB=\$installpath/lib$lib/pgplot/rgb.txt"
                echo $preload
		shift
		;;
	--exec)
 		shift
		exec_str=\$1
		shift
		;;
	--help)
		usage
		shift
		;;
    esac
done

if [ "\$exec_str" ]; then
	LD_LIBRARY_PATH=\$installpath/lib:/lib:/usr/lib:\$LD_LIBRARY_PATH
	CASAPATH="\$installpath `uname -s | tr [:upper:] [:lower:]` local `uname -n`"
	PATH="\$installpath/lib$lib/exec:\$installpath/lib$lib/casapy/bin:/usr/bin:/usr/X11R6/bin:\$PATH"
	PYTHONHOME=\$installpath
	_PYTHONPATH=\$PYTHONPATH
	unset PYTHONPATH
	TCL_LIBRARY="\$installpath/share/tcl8.4"
	QT_PLUGIN_PATH="\$installpath/lib$lib/qt-4.7.1/plugins"
	__CASAPY_PYTHONDIR="\$installpath/lib$lib/python$pyversion{$rhver}"
	PGPLOT_FONT=\$installpath/lib$lib/pgplot/grfont.dat
        PGPLOT_DIR=\$installpath/lib$lib
        PGPLOT_RGB=\$installpath/lib$lib/pgplot/rgb.txt
	export PGPLOT_FONT PGPLOT_DIR PGPLOT_RGB
	export QT_PLUGIN_PATH TCL_LIBRARY CASAPATH PATH LD_LIBRARY_PATH PYTHONHOME __CASAPY_PYTHONDIR
	$epreload
	exec /bin/sh -c "\$exec_str"
fi
EOF
close(INFO);
system("chmod 755 casapyinfo");

##
## write out new buildmytasts
##
open( BUILDTASKS, "> buildmytasks" );
print BUILDTASKS <<EOF;
#!/bin/sh
# Generated by scripts/userdistro.  Do not edit.

name="\$0"
while test -L "\$name"; do
   newname=`readlink \$name`
   name=`cd -P -- "\$(dirname -- "\$name")" && cd -P -- "\$(dirname -- "\$newname")" && echo \$(pwd -P)`/\$(basename -- \$name)
done

path=\$(dirname -- "\$name")
installpath=`cd -P -- "\$path" && echo \$(pwd -P)`

LD_LIBRARY_PATH=\$installpath/lib$lib:/lib$lib:/usr/lib$lib:\$LD_LIBRARY_PATH
export CASAPATH="\$installpath `uname -s | tr [:upper:] [:lower:]` local `uname -n`"
PATH="\$installpath/lib$lib/exec:\$installpath/lib$lib/casapy/bin:/usr/bin:/usr/X11R6/bin:\$PATH"

exec \$installpath/lib$lib/casapy/bin/buildmytasks \$*
EOF
close(BUILDTASKS);
system("chmod 755 buildmytasks");
system("cd bin && ln -s ../buildmytasks");

$here = `pwd`;
system( "find . -type f -exec chmod a+r \{\} \\;" );
system( "find . -type d -exec chmod a+rx \{\} \\;" );
##### remove broken symlinks #####
system( "rm -f `find . -type l ! -exec test -r \{\} \\; -print`");


chdir "$tmp/$id";
system( "tar -zcf $dumpdir/casapy$tag-$version$bit.tar.gz casapy$tag-$version$bit" );
chdir "$tmp";
system( "rm -rf $id" );
print "\n$dumpdir/casapy$tag-$version$bit.tar.gz\n";

