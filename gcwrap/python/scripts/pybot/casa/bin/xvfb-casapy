#!/usr/bin/perl
use local::lib;
use IO::Select;
use Expect;

$debug = 1;

########################################
######### variable used to clean up...
########################################
$xvfb_pid = 0;
$authority = '';
########################################

END {
    if ( $xvfb_pid ) {
	kill 9, $xvfb_pid;
    }
    if ( $authority ) {
	unlink($authority);
    }
}

##
## takes display number & authority file
sub create_authority {
    my $display_num = shift;
    my $file = shift;
    my $cookie = '';
    my $seed = 0;
    for (1..10) {
	srand(time+$$+$seed);
	$cookie .= sprintf("%4.5x", ($seed = int(rand(65536))));
    }
    $cookie = substr $cookie, 0, 32;
    open( XAUTH, "xauth -f $file add :$display_num . $cookie 2>&1 |" );
    print "creating xauthority file $file for display :$display_num...\n" if $debug;
    while ( <XAUTH> ) {
	print "   $_" if $debug;
    }
    close(XAUTH);
}

sub launch_xvfb {
    my $authority = shift;
    my $display=4;
    my $failed = 1;
    while ( $failed ) {
	$failed = 0;
	pipe my $read, my $write or die "could not create pipe";
        ###
        ### make pipe unbuffered...
        ###
	select((select($write), $| = 1)[0]);
	if ( my $pid = fork( ) ) {
	    ########################################
	    #### parent
	    ########################################
	    $xvfb_pid = $pid;
	    close $write;
	    print "trying to start xvfb on display :$display...\n" if $debug;
	    my $readable = IO::Select->new($read);

	    while ( my @ready = $readable->can_read(5) ) {
		foreach $fh ( @ready ) {
		    my $buf = <$fh>;
		    if ( $buf ) {
			# output read
			print "   $buf" if $debug;
			if ( $buf =~ m|server.*already active|i ) {
			    $readable->remove($fh);
			    close($fh);
			    $failed = 1;
			    $display += 1;
			}
		    } else {
			# connection closed
			$readable->remove($fh);
			close($fh);
			$failed = 1;
			$display += 1;
		    }
		}
	    }
	} else {
	    ########################################
	    #### child
	    ########################################
	    close $read;
	    open(STDERR, ">&=" . fileno($write)) or die "cannot dup to stderr";
	    open(STDOUT, ">&=" . fileno($write)) or die "cannot dup to stdout";
	    my @args = ( 'Xvfb', ":$display", "-screen", "0", "2048x2048x24+32", "-auth", $authority );
	    exec { $args[0] } @args;
	    die "exec failed...";
	}
    }
    return $display;
}

###
### make stdout & stderr unbuffered...
###
select((select(STDOUT), $| = 1)[0]);
select((select(STDERR), $| = 1)[0]);

$tmpdir="/tmp";
@todo = ( );
while ( @ARGV ) {
    $_ = shift(@ARGV);
    if ( m|--tmpdir=(\S+)| ) {
	my $t = $1;
	if ( -d $t ) {
	    open ( my $fh, "> $t/$$" ) or die "cannot write to temporary directory: $t";
	    close($fh);
	    unlink("$t/$$");
	    $tmpdir = $t;
	} else {
	    die "specified temporary directory ($t) is not a directory...";
	}
    } elsif ( $_ eq '-i' ) {
	die "no module provided with '-i'" unless scalar(@ARGV) > 0;
	my $import = shift(@ARGV);
	push( @todo, "import $import" );
    } elsif ( $_ eq '-c' ) {
	die "no expression provided with '-c'" unless scalar(@ARGV) > 0;
	my $expr = shift(@ARGV);
	push( @todo, $expr );
    } elsif ( $_ eq '-f' ) {
	die "no file provided with '-f'" unless scalar(@ARGV) > 0;
	my $file = shift(@ARGV);
	die "$file does not exits" unless -e $file;
	die "specified file ($file) is a directory" if -d $file;
	open( IN, "< $file" ) or die "cannot open file: $file";
	close(IN);
	push( @todo, "execfile('$file')" );
    } elsif ( $_ eq '-cd' ) {
	die "no directory provided with '-cd'" unless scalar(@ARGV) > 0;
	my $dir = shift(@ARGV);
	die "specified '-cd' parameter ($dir) is not a directory" unless -d $dir;
	chdir($dir) or die "Can't change to directory $dir ... ($!)\n";
    } elsif ( m|--eval=(\S+)| ) {
	my $e = $1;
	die "eval file ($e) does not exist.." unless -f $e;
	open(F,"< $e") or die "cannot read $e";
	my @x = <F>;
	close(F);
	eval(join('',@x)) or die "--eval failed: $!\n";
    }
}

$authority = "$tmpdir/.xauth-$$";
open( XAUTH, "> $authority" ) or die "cannot create xauth file...";
close( XAUTH );

print "using xauthority file:   $authority\n" if $debug;
$display = launch_xvfb( $authority );
print "opened display:          $display\n" if $debug;
create_authority( $display, $authority );

$ENV{'DISPLAY'} = "localhost:$display.0";
$ENV{'XAUTHORITY'} = $authority;

print "(xvfb-casapy) current directory: ", getcwd, "\n";
print "--------------------------------------------------------------------------------\n";

unless ( $casa_pid = fork( ) ) {
    ########################################
    #### child
    ########################################

#    ### watchdog (of the parent process group)
#    if ( fork( ) == 0 ) {
#	$SIG{INT} = "IGNORE";
#	$SIG{TERM} = "IGNORE";
#	$SIG{HUP} = "IGNORE";
#	## close standard input to avoid terminal interrupts
#	close(STDIN);
#	close(STDOUT);
#	close(STDERR);
#	$ppid = getppid( );
#	while (1) {
#	    if ( kill(0,$ppid) == 0 ) { break; }
#	    sleep(3);
#	}
#
#	kill(-15,$ppid);
#	sleep(6);
#	kill(-9,$ppid);
#	exit(0);
#    }

    ### all casa processes started are children of this child
    setpgrp(0,0);

    print "(xvfb-casapy) current directory <begin>: ", getcwd, "\n" if $debug;
    print "(xvfb-casapy) starting casapy as: casapy ", join(' ',@args), "\n" if $debug;
    my @args = ( "--nologger", "--log2term", "--colors=NoColor" );
    $expect = new Expect( "casapy", @args );

    my $timeout = 1800;
    $expect->expect( $timeout,	[ qr/CASA\s+<\S*?>/ =>	 	sub {
								   my $exp = shift;
								   if ( scalar(@todo) > 0 ) {
								       my $cmd = shift(@todo);
								       $expect->send("$cmd\n");
								       exp_continue;
								   } else {
								       $expect->send("exit\n");
								       exp_continue;
								   }
								} ],
				[ qr/leaving casapy.../ =>	sub {
								   my $exp = shift;
								   sleep(5);
								} ],
				[ qr/.+/ =>			sub {
								    my $exp = shift;
								    exp_continue;
								} ],
				[ timeout =>			sub { $timeout_occurred = 1; } ],
				[ eof =>			sub { $eof_occurred = 1; } ] );


    print "(xvfb-casapy) current directory <end>: ", getcwd, "\n";
    print "[result:exit condition] died prematurely\n" if $eof_occurred;
    print "[result:exit condition] execution timedout after " . ($timeout / 60) . " minutes of no output\n" if $timeout_occurred;
    print "[result:exit condition] execution completed...\n";
    exit $expect->exitstatus( );
}

waitpid( $casa_pid, 0 );
print "[result:exit status] $?\n";
exit(0);
